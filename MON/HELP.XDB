ALIAS name action
BREAK |CLEAR|MONST|SET|
BREAK CLEAR [addr] ;clear breakpoint (or all breakpoints)
BREAK MONST addr[,[count|*|=|-|?cond]] ;MonST syntax
BREAK SET addr |AFTER count|CONDITIONAL expr|COUNT|PERMANENT|TRAP tnum|TEMP
CDIRECTORY path ;changes current drive/directory
DIALOG title line1 [line2[line3]] ;entered line is #d
DIRECTORY wildcard
ECHO |"string"|$expr|expr|
ENDPROC ;closes PROC definition
EVAL expr
EXIT
GO |FAST|SLOW|UNTIL|expr
GO FAST expr ;uses Trace2 mode until expr is non-zero
GO SLOW expr ;uses Trace mode until expr is non-zero
GO UNTIL expr ;insert breakpoint and run full speed
HELP command ;you're using it!
KEY |ALT|CTRL|FN|NORMAL|
KEY ALT key command ;key=a-z
KEY CTRL key command ;key=a-z
KEY FN key command ;key=1-20
KEY NORMAL key command ;key=a-z
LIST [>file] |ALIAS|ASM|BREAK|COMMANDS|DATA|DISS|FUNCTION|HISTORY|HELP|...
! |INFO|KEYS|MEMORY|MMU||RESERVED|STACK|USER|WINDOWS|
LIST DISS start [end] ;disassemble
LIST FUNCTION *|func|:filename|:: ;*=globals,::=files only
LOAD |AGAIN|AMIGA|ASCII|BIN|EXEC|KILL|NODEBUG|NOTHING|SCRIPT|USER|WAIT|
LOAD AGAIN ;loads last program & command-line
LOAD AMIGA filename ;loads Amiga executable & symbols
LOAD BIN filename ;loads any file as executable
LOAD EXEC filename ;loads executable file & debug
LOAD KILL ;kills current program
LOAD NODEBUG filename ;loads executable without debug
LOAD NOTHING ;clears any loaded debug info
LOAD SCRIPT filename ;loads ASCII file of commands
LOAD USER [filename] ;loads user symbol table
LOAD WAIT filename ;waits for desk accessory/CPX to load (AUTO only)
MEMORY |ADD|FILL|
MEMORY ADD start end+1 [flag] ;adds to memory list 1=RO,2=WO,3=RW
MEMORY FILL start end bytevalue
MMU |INIT|RESET|WCLEAR|WPROTECT|
MMU INIT |ST|TT|ALL| ;initialises MMU into debug mode (default=ALL)
MMU RESET ;restores old MMU state
MMU WCLEAR start
MMU WPROTECT start [end] ;write protect range (default=4 bytes)
POKEB addr data [data]
POKEW addr data [data]
POKEL addr data [data]
POKES addr 'string'
PROC name ;starts definition, end with ENDPROC
QUIT ;exit debugger
REG reg[=expr] ;read and change register
RUN |FAST|SLOW|UNTIL|expr
RUN FAST expr ;uses Trace2 mode until expr is non-zero
RUN SLOW expr ;uses Trace mode until expr is non-zero
RUN UNTIL expr ;insert breakpoint and run full speed
SAVE |BIN|USER|
SAVE BIN filename start end ;save raw binary, end=inclusive
SAVE USER [filename] ;save user symbols
SCREEN |CLEAR|FONT|OTHER|USER|
SCREEN CLEAR ;clears and redraws whole screen
SCREEN FONT ;changes font size, if possible
SCREEN OTHER [addr];switches to program screen
SCREEN USER ;switches to program screen with program's mouse handler
SEARCH |ATTACH|BYTE|INSTRUCTION|LONG|NEXT|TEXT|WORD|
SEARCH ATTACH [window] ;attach search to a window
SEARCH BYTE [addr] byte1 [byte2] [byte3]...
SEARCH INSTRUCTION [addr] text
SEARCH LONG [addr] long1 [long2] [long3] etc
SEARCH NEXT [addr]
SEARCH TEXT [addr] text
SEARCH WORD [addr] word1 [word2] [word3] etc
SET [variable [string]] ;set or list internal strings
STEP |AMISS|ASM|ASKIP|FASTASM|INTERPRET|SNEXT|SSKIP|SOURCE|
STEP AMISS ;ignore instruction at PC
STEP ASM [count] ;single step assembly language
STEP ASKIP ;insert breakpoint after current instruction then run
STEP FASTASM ;single step using Trace2 mode
STEP INTERPRET ;interpret instruction (eg for skipping BSRs in ROM)
STEP SNEXT ;inserts breakpoint at next source line then runs
STEP SSKIP ;single step source line at current level
STEP SOURCE ;single step source line
SYMBOL |ADD|CLEAR|DATA|LOAD|SAVE|
SYMBOL ADD name value ;define uer symbol
SYMBOL CLEAR ;clears all user symbols
SYMBOL DATA start end [B|W|L] ;define data area
SYSTEM ;exit debugger
WATCH |ADD|CLEAR|DELETE|
WATCH ADD expr [format] ;add to watch window (Dec,heX,Ascii,Char)
WATCH CLEAR ;clear entire watch window
WATCH DELETE num ;remove item from watch
WATCH EDIT num expr [format] ;change item (Dec,heX,Ascii,Char)
WINDOW |ADDRESS||CLONE|CLOSE|FRONT|LOCK|MODE|MOVE|OPEN|PRINT|RECALC|ZOOM|
WINDOW ADDRESS wnum expr ;sets address of window
WINDOW CLONE wnum [title] ;creates frozen copy of window contents
WINDOW CLOSE wnum
WINDOW FRONT wnum ;bring window to front
WINDOW LOCK wnum [An] ;lock window to address reg (or unlock)
WINDOW MODE wnum [|ASM|SOURCE|MIXED] ;change preferred smart window type
WINDOW MOVE wnum [x y w h] ;move window (interactive if no params)
WINDOW OPEN type wnum [expr [x y w h]]
! type=|BREAK|COMMAND|DISS|FPU|LOCAL|MEM|MMU|REGS|WATCH| 
WINDOW PRINT wnum ;dump contents to printer
WINDOW RECALC wnum ;rebuild window contents (rarely required)
WINDOW ZOOM wnum ;(un)zoom window
